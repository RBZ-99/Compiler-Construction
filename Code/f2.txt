5 ) Lexical Error : $eclare
13 ) Lexical Error : #
FIRST(MAINPROGRAM) = { DEF, DRIVERDEF, DECLARE, DRIVER, COMMA, RANGEOP, MINUS, EPSILON,  }
FIRST(MODULEDECLARATIONS) = { DECLARE, DRIVER, MINUS, EPSILON,  }
FIRST(MODULEDECLARATION) = { DECLARE, MINUS,  }
FIRST(OTHERMODULES) = { DEF, DRIVER, COMMA, EPSILON,  }
FIRST(DRIVERMODULE) = { DRIVERDEF, RANGEOP,  }
FIRST(NTMODULE) = { DEF, COMMA,  }
FIRST(MODULEDEF) = { START, DEFAULT,  }
FIRST(RET) = { RETURNS, DRIVER, BREAK, EPSILON,  }
FIRST(INPUT_PLIST) = { ID, MUL,  }
FIRST(INPUT_PLIST_DASH) = { DEF, DRIVER, COMMA, EPSILON,  }
FIRST(OUTPUT_PLIST) = { ID, MUL,  }
FIRST(OUTPUT_PLIST_DASH) = { DEF, DRIVER, COMMA, EPSILON,  }
FIRST(DATATYPE) = { ARRAY, INTEGER, REAL, BOOLEAN, LT, GT, GE, EQ,  }
FIRST(TYPE) = { INTEGER, REAL, BOOLEAN, GT, GE, EQ,  }
FIRST(STATEMENTS) = { MODULE, DRIVERENDDEF, TAKES, SQBO, DECLARE, ID, DRIVER, GET_VALUE, PRINT, USE, FOR, WHILE, SWITCH, BC, MINUS, MUL, EPSILON, PROGRAM, (null), ,  }
FIRST(STATEMENT) = { MODULE, DRIVERENDDEF, TAKES, SQBO, DECLARE, ID, DRIVER, GET_VALUE, PRINT, USE, FOR, WHILE, SWITCH, BC, MINUS, MUL, EPSILON, PROGRAM, (null), ,  }
FIRST(IOSTMT) = { GET_VALUE, PRINT, PROGRAM, (null),  }
FIRST(LITERAL) = { ID, TRUE, FALSE, NUM, RNUM, MUL, NE, AND, LEX_ERROR, END_OF_FILE,  }
FIRST(VAR) = { ID, NUM, RNUM, MUL, LEX_ERROR, END_OF_FILE,  }
FIRST(WHICHID) = { SQBO, DRIVER, BC, EPSILON,  }
FIRST(SIMPLESTMT) = { SQBO, ID, DRIVER, USE, BC, MUL, EPSILON, ,  }
FIRST(ASSIGNMENTSTMT) = { ID, MUL,  }
FIRST(WHICHSTMT) = { SQBO, ASSIGNOP, BC, OR,  }
FIRST(LVALUEIDSTMT) = { ASSIGNOP, OR,  }
FIRST(LVALUEARRSTMT) = { SQBO, BC,  }
FIRST(INDEX) = { ID, NUM, MUL, LEX_ERROR,  }
FIRST(MODULEREUSESTMT) = { SQBO, DRIVER, USE, BC, EPSILON, ,  }
FIRST(OPTIONAL) = { SQBO, DRIVER, BC, EPSILON,  }
FIRST(IDLIST) = { ID, MUL,  }
FIRST(IDLIST_DASH) = { DEF, DRIVER, COMMA, EPSILON,  }
FIRST(EXPRESSION) = { INPUT, END, DECLARE, ID, COLON, ARRAY, OF, INTEGER, REAL, BOOLEAN, TRUE, FALSE, ASSIGNOP, NUM, RNUM, DRIVER, BO, PLUS, MINUS, MUL, DIV, LT, LE, GT, GE, EQ, NE, AND, OR, LEX_ERROR, END_OF_FILE, EPSILON,  }
FIRST(RESTEXPRESSION) = { INPUT, END, DECLARE, ID, COLON, ARRAY, OF, INTEGER, REAL, BOOLEAN, TRUE, FALSE, ASSIGNOP, NUM, RNUM, DRIVER, BO, PLUS, MINUS, MUL, DIV, LT, LE, GT, GE, EQ, NE, AND, OR, LEX_ERROR, END_OF_FILE, EPSILON,  }
FIRST(RELATIONALEXPR) = { INPUT, END, DECLARE, ID, COLON, ARRAY, OF, INTEGER, REAL, BOOLEAN, TRUE, NUM, RNUM, DRIVER, BO, PLUS, MINUS, MUL, DIV, LT, LE, GT, GE, EQ, NE, LEX_ERROR, END_OF_FILE, EPSILON,  }
FIRST(RESTRELATIONALEXPR) = { INPUT, END, DECLARE, ID, COLON, ARRAY, OF, INTEGER, REAL, BOOLEAN, TRUE, NUM, RNUM, DRIVER, BO, PLUS, MINUS, MUL, DIV, LT, LE, GT, GE, EQ, NE, LEX_ERROR, END_OF_FILE, EPSILON,  }
FIRST(LOGICALOP) = { FALSE, ASSIGNOP, AND, OR,  }
FIRST(RELATIONALOP) = { ARRAY, OF, INTEGER, REAL, BOOLEAN, TRUE, LT, LE, GT, GE, EQ, NE,  }
FIRST(UNARYARITHMETICEXPR) = { INPUT, END, DECLARE, ID, NUM, RNUM, BO, PLUS, MINUS, MUL, LEX_ERROR, END_OF_FILE,  }
FIRST(RESTUNARYARITHMETICEXPR) = { INPUT, ID, NUM, RNUM, BO, MUL, LEX_ERROR, END_OF_FILE,  }
FIRST(NONUNARYARITHMETICEXPR) = { INPUT, END, DECLARE, ID, COLON, NUM, RNUM, DRIVER, BO, PLUS, MINUS, MUL, DIV, LEX_ERROR, END_OF_FILE, EPSILON,  }
FIRST(ARITHMETICEXPRDASH) = { INPUT, END, DECLARE, ID, COLON, NUM, RNUM, DRIVER, BO, PLUS, MINUS, MUL, DIV, LEX_ERROR, END_OF_FILE, EPSILON,  }
FIRST(TERM) = { INPUT, ID, COLON, NUM, RNUM, DRIVER, BO, MUL, DIV, LEX_ERROR, END_OF_FILE, EPSILON,  }
FIRST(TERM_DASH) = { INPUT, ID, COLON, NUM, RNUM, DRIVER, BO, MUL, DIV, LEX_ERROR, END_OF_FILE, EPSILON,  }
FIRST(FACTOR) = { INPUT, ID, NUM, RNUM, BO, MUL, LEX_ERROR, END_OF_FILE,  }
FIRST(ADDSUBOP) = { END, DECLARE, PLUS, MINUS,  }
FIRST(MULDIVOP) = { ID, COLON, MUL, DIV,  }
FIRST(DECLARESTMT) = { DECLARE, MINUS,  }
FIRST(CONDITIONALSTMT) = { TAKES, SWITCH,  }
FIRST(CASESTMT) = { SQBC, CASE,  }
FIRST(OTHERCASE) = { SQBC, DRIVER, CASE, EPSILON,  }
FIRST(VALUE) = { TRUE, FALSE, NUM, NE, AND, LEX_ERROR,  }
FIRST(DEFAULTSTMT) = { START, DRIVER, DEFAULT, EPSILON,  }
FIRST(ITERATIVESTMT) = { MODULE, DRIVERENDDEF, FOR, WHILE,  }
FIRST(RANGE) = { DRIVERDEF, ID, NUM, RANGEOP, MUL, LEX_ERROR,  }
